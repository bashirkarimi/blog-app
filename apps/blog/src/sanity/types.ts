/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type DetailsPage = {
  _id: string;
  _type: "detailsPage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  useDefaultHero?: boolean;
  heros?: Array<{
    _key: string;
  } & Hero>;
  sections?: Array<{
    _key: string;
  } & BlogList | {
    _key: string;
  } & Accordion | {
    _key: string;
  } & ImageTeaser | {
    _key: string;
  } & RichText | {
    _key: string;
  } & TeaserList>;
};

export type HomePage = {
  _id: string;
  _type: "homePage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  seoTitle?: string;
  heros?: Array<{
    _key: string;
  } & Hero>;
  sections?: Array<{
    _key: string;
  } & BlogList | {
    _key: string;
  } & Accordion | {
    _key: string;
  } & ImageTeaser | {
    _key: string;
  } & RichText | {
    _key: string;
  } & TeaserList>;
};

export type SiteSettings = {
  _id: string;
  _type: "siteSettings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  siteTitle?: string;
  logo?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  headerMenu?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "menu";
  };
  defaultSeo?: {
    title?: string;
    description?: string;
    ogImage?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
  };
};

export type TeaserList = {
  _type: "teaserList";
  mode?: "manual" | "posts";
  items?: Array<{
    title?: string;
    summary?: string;
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    href?: string;
    _type: "teaser";
    _key: string;
  }>;
  postRefs?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "post";
  }>;
};

export type RichText = {
  _type: "richText";
  body?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
};

export type ImageTeaser = {
  _type: "imageTeaser";
  title?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  href?: string;
  description?: string;
};

export type Accordion = {
  _type: "accordion";
  items?: Array<{
    title?: string;
    content?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
    _key: string;
  }>;
};

export type BlogList = {
  _type: "blogList";
  title?: string;
  mode?: "latest" | "manual";
  limit?: number;
  posts?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "post";
  }>;
};

export type Hero = {
  _type: "hero";
  title?: string;
  text?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type Heros = Array<{
  _key: string;
} & Hero>;

export type Sections = Array<{
  _key: string;
} & BlogList | {
  _key: string;
} & Accordion | {
  _key: string;
} & ImageTeaser | {
  _key: string;
} & RichText | {
  _key: string;
} & TeaserList>;

export type BlockContent = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
  listItem?: "bullet";
  markDefs?: Array<{
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
} | {
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  media?: unknown;
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  _type: "image";
  _key: string;
}>;

export type Tag = {
  _id: string;
  _type: "tag";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
};

export type Menu = {
  _id: string;
  _type: "menu";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  items?: Array<{
    label?: string;
    target?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "landingPage";
    };
    _type: "menuItem";
    _key: string;
  }>;
};

export type Post = {
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  excerpt?: string;
  body?: BlockContent;
  categories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
  publishedAt?: string;
};

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
};

export type Author = {
  _id: string;
  _type: "author";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  bio?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type LandingPage = {
  _id: string;
  _type: "landingPage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  heros?: Array<{
    _key: string;
  } & Hero>;
  sections?: Array<{
    _key: string;
  } & BlogList | {
    _key: string;
  } & Accordion | {
    _key: string;
  } & ImageTeaser | {
    _key: string;
  } & RichText | {
    _key: string;
  } & TeaserList>;
  description?: string;
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = DetailsPage | HomePage | SiteSettings | TeaserList | RichText | ImageTeaser | Accordion | BlogList | Hero | Heros | Sections | BlockContent | Tag | Menu | Post | Category | Author | LandingPage | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ../blog/src/sanity/queries.ts
// Variable: expandSections
// Query: sections[]{    ...,    _type == 'blogList' => {      limit,      title,      mode,      "posts": select(        mode == "manual" => posts[]->{            _id,  title,  "slug": slug.current,  publishedAt,  mainImage,  excerpt,  "author": author->{ _id, name },  "categories": categories[]->{ _id, title }        },        mode != "manual" => []      ),      "total": select(        mode == "manual" => count(posts[]),        mode != "manual" => count(*[_type == "post" && defined(slug.current)])      )    },    _type == 'teaserList' => {      ...,      postRefs[]->{        title,        mainImage,        "slug": slug.current      }    },    _type == 'postsModule' => {      ...,      tags[]->{ title, "slug": slug.current }    }  }
export type ExpandSectionsResult = never;
// Variable: HOME_PAGE_QUERY
// Query: *[_type=='homePage' && _id=='homePage'][0]{    seoTitle,    heros[],      sections[]{    ...,    _type == 'blogList' => {      limit,      title,      mode,      "posts": select(        mode == "manual" => posts[]->{            _id,  title,  "slug": slug.current,  publishedAt,  mainImage,  excerpt,  "author": author->{ _id, name },  "categories": categories[]->{ _id, title }        },        mode != "manual" => []      ),      "total": select(        mode == "manual" => count(posts[]),        mode != "manual" => count(*[_type == "post" && defined(slug.current)])      )    },    _type == 'teaserList' => {      ...,      postRefs[]->{        title,        mainImage,        "slug": slug.current      }    },    _type == 'postsModule' => {      ...,      tags[]->{ title, "slug": slug.current }    }  }  }
export type HOME_PAGE_QUERYResult = {
  seoTitle: string | null;
  heros: Array<{
    _key: string;
  } & Hero> | null;
  sections: Array<{
    _key: string;
    _type: "accordion";
    items?: Array<{
      title?: string;
      content?: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }>;
      _key: string;
    }>;
  } | {
    _key: string;
    _type: "blogList";
    title: string | null;
    mode: "latest" | "manual" | null;
    limit: number | null;
    posts: Array<{
      _id: string;
      title: string | null;
      slug: string | null;
      publishedAt: string | null;
      mainImage: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      } | null;
      excerpt: string | null;
      author: {
        _id: string;
        name: string | null;
      } | null;
      categories: Array<{
        _id: string;
        title: string | null;
      }> | null;
    }> | Array<never> | null;
    total: number | null;
  } | {
    _key: string;
    _type: "imageTeaser";
    title?: string;
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    href?: string;
    description?: string;
  } | {
    _key: string;
    _type: "richText";
    body?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
      listItem?: "bullet";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    } | {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
      _key: string;
    }>;
  } | {
    _key: string;
    _type: "teaserList";
    mode?: "manual" | "posts";
    items?: Array<{
      title?: string;
      summary?: string;
      image?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      };
      href?: string;
      _type: "teaser";
      _key: string;
    }>;
    postRefs: Array<{
      title: string | null;
      mainImage: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      } | null;
      slug: string | null;
    }> | null;
  }> | null;
} | null;
// Variable: LANDING_PAGE_QUERY
// Query: *[_type == 'landingPage' && slug.current == $slug][0]{    seoTitle,    title,    heros[],      sections[]{    ...,    _type == 'blogList' => {      limit,      title,      mode,      "posts": select(        mode == "manual" => posts[]->{            _id,  title,  "slug": slug.current,  publishedAt,  mainImage,  excerpt,  "author": author->{ _id, name },  "categories": categories[]->{ _id, title }        },        mode != "manual" => []      ),      "total": select(        mode == "manual" => count(posts[]),        mode != "manual" => count(*[_type == "post" && defined(slug.current)])      )    },    _type == 'teaserList' => {      ...,      postRefs[]->{        title,        mainImage,        "slug": slug.current      }    },    _type == 'postsModule' => {      ...,      tags[]->{ title, "slug": slug.current }    }  }  }
export type LANDING_PAGE_QUERYResult = {
  seoTitle: null;
  title: string | null;
  heros: Array<{
    _key: string;
  } & Hero> | null;
  sections: Array<{
    _key: string;
    _type: "accordion";
    items?: Array<{
      title?: string;
      content?: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
        listItem?: "bullet" | "number";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }>;
      _key: string;
    }>;
  } | {
    _key: string;
    _type: "blogList";
    title: string | null;
    mode: "latest" | "manual" | null;
    limit: number | null;
    posts: Array<{
      _id: string;
      title: string | null;
      slug: string | null;
      publishedAt: string | null;
      mainImage: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      } | null;
      excerpt: string | null;
      author: {
        _id: string;
        name: string | null;
      } | null;
      categories: Array<{
        _id: string;
        title: string | null;
      }> | null;
    }> | Array<never> | null;
    total: number | null;
  } | {
    _key: string;
    _type: "imageTeaser";
    title?: string;
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    href?: string;
    description?: string;
  } | {
    _key: string;
    _type: "richText";
    body?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
      listItem?: "bullet";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    } | {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
      _key: string;
    }>;
  } | {
    _key: string;
    _type: "teaserList";
    mode?: "manual" | "posts";
    items?: Array<{
      title?: string;
      summary?: string;
      image?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      };
      href?: string;
      _type: "teaser";
      _key: string;
    }>;
    postRefs: Array<{
      title: string | null;
      mainImage: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      } | null;
      slug: string | null;
    }> | null;
  }> | null;
} | null;
// Variable: SITE_SETTINGS_QUERY
// Query: *[_type=='siteSettings' && _id=='siteSettings'][0]{    siteTitle,    logo,    defaultSeo,    headerMenu->{      title,      items[]{label, target->{"_id": _id, title, "slug": slug.current}}    }  }
export type SITE_SETTINGS_QUERYResult = {
  siteTitle: string | null;
  logo: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  defaultSeo: {
    title?: string;
    description?: string;
    ogImage?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
  } | null;
  headerMenu: {
    title: string | null;
    items: Array<{
      label: string | null;
      target: {
        _id: string;
        title: string | null;
        slug: string | null;
      } | null;
    }> | null;
  } | null;
} | null;
// Variable: POSTS_QUERY
// Query: *[_type == "post"    && defined(slug.current)    && (!defined($category) || $category == "" || $category in categories[]->title)  ] | order(coalesce(publishedAt, _createdAt) desc)[0...$limit]{      _id,  title,  "slug": slug.current,  publishedAt,  mainImage,  excerpt,  "author": author->{ _id, name },  "categories": categories[]->{ _id, title }  }
export type POSTS_QUERYResult = Array<{
  _id: string;
  title: string | null;
  slug: string | null;
  publishedAt: string | null;
  mainImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  excerpt: string | null;
  author: {
    _id: string;
    name: string | null;
  } | null;
  categories: Array<{
    _id: string;
    title: string | null;
  }> | null;
}>;
// Variable: POST_BY_SLUG_QUERY
// Query: *[_type == "post" && slug.current == $slug][0]{      ...,  "author": author->{ _id, name },  "categories": categories[]->{ _id, title }  }
export type POST_BY_SLUG_QUERYResult = {
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  author: {
    _id: string;
    name: string | null;
  } | null;
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  excerpt?: string;
  body?: BlockContent;
  categories: Array<{
    _id: string;
    title: string | null;
  }> | null;
  publishedAt?: string;
} | null;
// Variable: POST_SLUGS_QUERY
// Query: *[_type == "post" && defined(slug.current)]{    "slug": slug.current  }
export type POST_SLUGS_QUERYResult = Array<{
  slug: string | null;
}>;
// Variable: UNIQUE_CATEGORIES_QUERY
// Query: array::unique(    *[_type == "post" && count(categories[]->title) > 0].categories[]->title  ) | order(@ asc)
export type UNIQUE_CATEGORIES_QUERYResult = Array<string | null>;
// Variable: CATEGORIES_IN_POST_QUERY
// Query: *[_type == "post" && count(categories[]->title) > 0]{    "categories": categories[]->title  }
export type CATEGORIES_IN_POST_QUERYResult = Array<{
  categories: Array<string | null> | null;
}>;
// Variable: CATEGORIES_WITH_COUNTS_QUERY
// Query: *[_type == "category"]{    _id,    title,    "count": count(*[_type == "post" && references(^._id) && defined(slug.current)])  } | order(title asc)
export type CATEGORIES_WITH_COUNTS_QUERYResult = Array<{
  _id: string;
  title: string | null;
  count: number;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "\n  sections[]{\n    ...,\n    _type == 'blogList' => {\n      limit,\n      title,\n      mode,\n      \"posts\": select(\n        mode == \"manual\" => posts[]->{\n          \n  _id,\n  title,\n  \"slug\": slug.current,\n  publishedAt,\n  mainImage,\n  excerpt,\n  \"author\": author->{ _id, name },\n  \"categories\": categories[]->{ _id, title }\n\n        },\n        mode != \"manual\" => []\n      ),\n      \"total\": select(\n        mode == \"manual\" => count(posts[]),\n        mode != \"manual\" => count(*[_type == \"post\" && defined(slug.current)])\n      )\n    },\n    _type == 'teaserList' => {\n      ...,\n      postRefs[]->{\n        title,\n        mainImage,\n        \"slug\": slug.current\n      }\n    },\n    _type == 'postsModule' => {\n      ...,\n      tags[]->{ title, \"slug\": slug.current }\n    }\n  }\n": ExpandSectionsResult;
    "\n  *[_type=='homePage' && _id=='homePage'][0]{\n    seoTitle,\n    heros[],\n    \n  sections[]{\n    ...,\n    _type == 'blogList' => {\n      limit,\n      title,\n      mode,\n      \"posts\": select(\n        mode == \"manual\" => posts[]->{\n          \n  _id,\n  title,\n  \"slug\": slug.current,\n  publishedAt,\n  mainImage,\n  excerpt,\n  \"author\": author->{ _id, name },\n  \"categories\": categories[]->{ _id, title }\n\n        },\n        mode != \"manual\" => []\n      ),\n      \"total\": select(\n        mode == \"manual\" => count(posts[]),\n        mode != \"manual\" => count(*[_type == \"post\" && defined(slug.current)])\n      )\n    },\n    _type == 'teaserList' => {\n      ...,\n      postRefs[]->{\n        title,\n        mainImage,\n        \"slug\": slug.current\n      }\n    },\n    _type == 'postsModule' => {\n      ...,\n      tags[]->{ title, \"slug\": slug.current }\n    }\n  }\n\n  }\n": HOME_PAGE_QUERYResult;
    "\n  *[_type == 'landingPage' && slug.current == $slug][0]{\n    seoTitle,\n    title,\n    heros[],\n    \n  sections[]{\n    ...,\n    _type == 'blogList' => {\n      limit,\n      title,\n      mode,\n      \"posts\": select(\n        mode == \"manual\" => posts[]->{\n          \n  _id,\n  title,\n  \"slug\": slug.current,\n  publishedAt,\n  mainImage,\n  excerpt,\n  \"author\": author->{ _id, name },\n  \"categories\": categories[]->{ _id, title }\n\n        },\n        mode != \"manual\" => []\n      ),\n      \"total\": select(\n        mode == \"manual\" => count(posts[]),\n        mode != \"manual\" => count(*[_type == \"post\" && defined(slug.current)])\n      )\n    },\n    _type == 'teaserList' => {\n      ...,\n      postRefs[]->{\n        title,\n        mainImage,\n        \"slug\": slug.current\n      }\n    },\n    _type == 'postsModule' => {\n      ...,\n      tags[]->{ title, \"slug\": slug.current }\n    }\n  }\n\n  }\n": LANDING_PAGE_QUERYResult;
    "\n  *[_type=='siteSettings' && _id=='siteSettings'][0]{\n    siteTitle,\n    logo,\n    defaultSeo,\n    headerMenu->{\n      title,\n      items[]{label, target->{\"_id\": _id, title, \"slug\": slug.current}}\n    }\n  }\n": SITE_SETTINGS_QUERYResult;
    "\n  *[_type == \"post\"\n    && defined(slug.current)\n    && (!defined($category) || $category == \"\" || $category in categories[]->title)\n  ] | order(coalesce(publishedAt, _createdAt) desc)[0...$limit]{\n    \n  _id,\n  title,\n  \"slug\": slug.current,\n  publishedAt,\n  mainImage,\n  excerpt,\n  \"author\": author->{ _id, name },\n  \"categories\": categories[]->{ _id, title }\n\n  }\n": POSTS_QUERYResult;
    "\n  *[_type == \"post\" && slug.current == $slug][0]{\n    \n  ...,\n  \"author\": author->{ _id, name },\n  \"categories\": categories[]->{ _id, title }\n\n  }\n": POST_BY_SLUG_QUERYResult;
    "\n  *[_type == \"post\" && defined(slug.current)]{\n    \"slug\": slug.current\n  }\n": POST_SLUGS_QUERYResult;
    "\n  array::unique(\n    *[_type == \"post\" && count(categories[]->title) > 0].categories[]->title\n  ) | order(@ asc)\n": UNIQUE_CATEGORIES_QUERYResult;
    "\n  *[_type == \"post\" && count(categories[]->title) > 0]{\n    \"categories\": categories[]->title\n  }\n": CATEGORIES_IN_POST_QUERYResult;
    "\n  *[_type == \"category\"]{\n    _id,\n    title,\n    \"count\": count(*[_type == \"post\" && references(^._id) && defined(slug.current)])\n  } | order(title asc)\n": CATEGORIES_WITH_COUNTS_QUERYResult;
  }
}
