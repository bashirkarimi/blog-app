import { SanityLive } from "@/sanity/live";
import { Header } from "@repo/modules/header";
import { Footer } from "@repo/modules/footer";
import { sanityFetch } from "@/sanity/live";
import { SITE_SETTINGS_QUERY } from "@/sanity/queries";
import { urlFor } from "@/sanity/image";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import "@repo/ui/styles.css";
import "@repo/modules/styles.css";
import { notFound } from "next/navigation";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default async function RootLayout({ children }) {
  const { data: siteSettings } = await sanityFetch({ query: SITE_SETTINGS_QUERY });

  if (!siteSettings) {
    return notFound();
  }

  // Map the raw site settings document to the HeaderModule shape expected by <Header />.
  const headerData = {
    _type: "header",
    siteTitle: siteSettings.siteTitle ?? undefined,
    logo: siteSettings.logo ? urlFor(siteSettings.logo).width(128).height(128).url() : undefined,
    headerMenu:
      siteSettings.headerMenu?.items
        ?.filter(Boolean)
        .map((item) => ({
          label: item?.label || "",
          href: item?.target?.slug || "",
        })) || [],
  };

  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <Header data={headerData} />
        {children}
        <SanityLive />
        <Footer />
      </body>
    </html>
  );
}
